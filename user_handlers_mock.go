// Code generated by MockGen. DO NOT EDIT.
// Source: user_handlers.go

// Package main is a generated GoMock package.
package main

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionManagerI is a mock of SessionManagerI interface.
type MockSessionManagerI struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerIMockRecorder
}

// MockSessionManagerIMockRecorder is the mock recorder for MockSessionManagerI.
type MockSessionManagerIMockRecorder struct {
	mock *MockSessionManagerI
}

// NewMockSessionManagerI creates a new mock instance.
func NewMockSessionManagerI(ctrl *gomock.Controller) *MockSessionManagerI {
	mock := &MockSessionManagerI{ctrl: ctrl}
	mock.recorder = &MockSessionManagerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManagerI) EXPECT() *MockSessionManagerIMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSessionManagerI) Check(arg0 *http.Request) (*Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockSessionManagerIMockRecorder) Check(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionManagerI)(nil).Check), arg0)
}

// Create mocks base method.
func (m *MockSessionManagerI) Create(arg0 http.ResponseWriter, arg1 *User) (*Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionManagerIMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionManagerI)(nil).Create), arg0, arg1)
}

// DestroyAll mocks base method.
func (m *MockSessionManagerI) DestroyAll(arg0 http.ResponseWriter, arg1 *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyAll indicates an expected call of DestroyAll.
func (mr *MockSessionManagerIMockRecorder) DestroyAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyAll", reflect.TypeOf((*MockSessionManagerI)(nil).DestroyAll), arg0, arg1)
}

// DestroyCurrent mocks base method.
func (m *MockSessionManagerI) DestroyCurrent(arg0 http.ResponseWriter, arg1 *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyCurrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyCurrent indicates an expected call of DestroyCurrent.
func (mr *MockSessionManagerIMockRecorder) DestroyCurrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyCurrent", reflect.TypeOf((*MockSessionManagerI)(nil).DestroyCurrent), arg0, arg1)
}

// MockUserRepoI is a mock of UserRepoI interface.
type MockUserRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoIMockRecorder
}

// MockUserRepoIMockRecorder is the mock recorder for MockUserRepoI.
type MockUserRepoIMockRecorder struct {
	mock *MockUserRepoI
}

// NewMockUserRepoI creates a new mock instance.
func NewMockUserRepoI(ctrl *gomock.Controller) *MockUserRepoI {
	mock := &MockUserRepoI{ctrl: ctrl}
	mock.recorder = &MockUserRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepoI) EXPECT() *MockUserRepoIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepoI) Create(user *User) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoIMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepoI)(nil).Create), user)
}

// GetById mocks base method.
func (m *MockUserRepoI) GetById(id string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepoIMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepoI)(nil).GetById), id)
}

// GetByLogin mocks base method.
func (m *MockUserRepoI) GetByLogin(login string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", login)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockUserRepoIMockRecorder) GetByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUserRepoI)(nil).GetByLogin), login)
}

// MockUserUtilsI is a mock of UserUtilsI interface.
type MockUserUtilsI struct {
	ctrl     *gomock.Controller
	recorder *MockUserUtilsIMockRecorder
}

// MockUserUtilsIMockRecorder is the mock recorder for MockUserUtilsI.
type MockUserUtilsIMockRecorder struct {
	mock *MockUserUtilsI
}

// NewMockUserUtilsI creates a new mock instance.
func NewMockUserUtilsI(ctrl *gomock.Controller) *MockUserUtilsI {
	mock := &MockUserUtilsI{ctrl: ctrl}
	mock.recorder = &MockUserUtilsIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUtilsI) EXPECT() *MockUserUtilsIMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockUserUtilsI) CheckPasswordHash(passwordReceived, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", passwordReceived, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockUserUtilsIMockRecorder) CheckPasswordHash(passwordReceived, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockUserUtilsI)(nil).CheckPasswordHash), passwordReceived, hash)
}

// GenerateJWT mocks base method.
func (m *MockUserUtilsI) GenerateJWT(user *User, sessID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", user, sessID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockUserUtilsIMockRecorder) GenerateJWT(user, sessID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockUserUtilsI)(nil).GenerateJWT), user, sessID)
}

// GeneratePasswordHash mocks base method.
func (m *MockUserUtilsI) GeneratePasswordHash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePasswordHash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePasswordHash indicates an expected call of GeneratePasswordHash.
func (mr *MockUserUtilsIMockRecorder) GeneratePasswordHash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePasswordHash", reflect.TypeOf((*MockUserUtilsI)(nil).GeneratePasswordHash), password)
}
